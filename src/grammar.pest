program = _{ SOI ~ instruction* ~ EOI }
statement = { "var" ~ ident ~ ":" ~ type ~ "=" ~ (function_call | expr) }

instruction = _{ ( statement ~ ";" | function_call ~ ";" | reassignment ~ ";" | while_loop ) }
reassignment = { ident ~ "=" ~ (function_call | expr) }

expr = { atom ~ (bin_op ~ atom)* }
atom = _{ integer | ident }
bin_op = _{ add | subtract | multiply | divide }
    add = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide = { "/" }

while_loop = { "while" ~ "(" ~ condition ~ ")" ~ "{" ~ instruction* ~ "}" }
condition = _{ atom ~ comp_op ~ atom }
comp_op = { equal | greater | less }
    equal = { "==" }
    greater = { ">" }
    less = { "<" }

type = { "HEX" | "DEC" | "BIN" }
function_call = { ident ~ "(" ~ parameter? ~ ("," ~ parameter)* ~ ")" }
parameter = { ASCII_ALPHA+ }
ident = @{ ASCII_ALPHA ~ (ASCII_ALPHA | ASCII_DIGIT)* }
integer = @{ ASCII_DIGIT+ }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
NEWLINE = _{ "\r\n" | "\n" }