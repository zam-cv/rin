program = _{ SOI ~ instruction* ~ EOI }
statement = { ("var" ~ ident ~ (":" ~ type)? ~ "=" ~ values | "var" ~ "*" ~ ident ~ (":" ~ type)? ~ "->" ~ values) }

values = _{ function_call | expr }
instruction = _{ ( statement ~ ";" | function_call ~ ";" | reassignment ~ ";" | dereference ~ ";" | while_loop | function | if_cond | loopp ) }
reassignment = { ident ~ "=" ~ values }
dereference = { "*" ~ ident ~ "=" ~ values }
deref = { "*" ~ ident }
function = { "fn " ~ ident ~ "(" ~ ")" ~ "{" ~ instruction* ~ "}" }
loopp = { "loop" ~ "{" ~ instruction* ~ "}" }

expr = { atom ~ (bin_op ~ atom)* }
atom = _{ integer | ident | deref }
bin_op = _{ add | subtract | multiply | divide }
    add = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide = { "/" }

if_cond = { "if " ~ "(" ~ condition_if ~ ")" ~ "{" ~ instruction* ~ "}" }
condition_if = _{ atom ~ comp_op_if ~ atom }
comp_op_if = { diff | greater | less }
diff = { "!=" }

while_loop = { "while" ~ "(" ~ condition_while ~ ")" ~ "{" ~ instruction* ~ "}" }
condition_while = _{ atom ~ comp_op_while ~ atom }
comp_op_while = { equal | greater | less }

equal= { "==" }
greater = { ">" }
less = { "<" }

type = { "HEX" | "DEC" | "BIN" }
function_call = { ident ~ "(" ~ parameter? ~ ("," ~ parameter)* ~ ")" }
parameter = { ASCII_ALPHA+ }
ident = @{ ASCII_ALPHA ~ (ASCII_ALPHA | ASCII_DIGIT)* }
integer = @{ ASCII_DIGIT+ }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
NEWLINE = _{ "\r\n" | "\n" }